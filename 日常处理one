#!/usr/bin/env python
import re, sys
file_exon = open('Genome.annotation_detail',"r")
bed_file = open('Genome_GO.xls',"w")
try:
    for line in file_exon.readlines():
        cols = line.strip().split("\t")
        if col[0] == "GeneID":
            print "line, file=bed_file"
        else:
            GO_ID = cols[0]
            Go_term = {1 : "Process", 2:"Function", 3:"Component"}
            key = Go_term.key()
            for x in key:
                i = cols[x]
#               print (i)
                GO_t = Go_term[x]
                for y in i.split(";"):
                    print ('{0}\t{1}\t{2}'.format(GO_ID,"\t".join(y.split("//")),GO_t,file=bed_file)
finally:
    file_exon.close()
    bed_file.close()



#!/usr/bin/env python

import sys
info=open(sys.argv[1])
diff=open(sys.argv[2])
out=open(sys.argv[3],'w')
d={}
for line in info:
	cols=line.strip().split("\t")
        a = line.strip().split("\t")
	d[cols[0]]="\t".join(a[1:])
info.close()

for line in diff:
	cols=line.strip().split("\t")
	if cols[1]=="gene_id":
		print >>out,(line.strip())
	else:
		print >>out,(d.get(cols[1],"-\t%s\t-"%cols[1])+"\t"+"\t".join(cols))
diff.close()
out.close()

#反向互补
#!/usr/bin/env python
#format of Seq01_2.fa:
#>@Seq01_HWI-M03152:49:000000000-AF8E3:1:1101:18774:1715 2:N:0:GTGAAA
#CGATGTGGACTACTAGTGTATCTAATCCTGTTCGATACCCACGCTTTCGTGCATGAGCGTCAGTTGAGCGCCGGTATGCTGCCTTCGCAATCGGAGTTCTGCGTGATATCTATGCATTTCACCGCTACACCACGCATTCCG
#>@Seq01_HWI-M03152:49:000000000-AF8E3:1:1101:7962:1803 2:N:0:GTGAAA
#GATGTGGACTACTGGGGTATCTAATCCCACGCTTTCGTGCATGAGCGTCAGTGGGGCTCCGGTATGCTGCCTTCGCAATCGGAGTTCTGCGTGATATCTATGCATTTCACCGCTACACTACGCATTCCGC
#>@Seq01_HWI-M03152:49:000000000-AF8E3:1:1101:21939:1855 2:N:0:GTGAAA
#CGATGTGGACTACCGGGGTATCTAATCCTGTTCGATCGTCAGTGTGGAGCCGGCATGCTGCCTTCGCAATCGGAGTTCTGCGCGATATCTATGCATTTCACCGCTACACCGCGCATTCCGC
miseq_2=open("Seq01_2.fa")
new=open("v4.fasta",'w')

for line in miseq_2:
    line=line.rstrip()
    if ">@" in line:
        new_line=line.split(" ")
        new.write(new_line[0]+"\n")
    else:
        for i in line[::-1]:
            if i=="A":
                new.write("T")
            elif i=="T":
                new.write("A")
            elif i=="C":
                new.write("G")
            elif i=="G":
                new.write("C")
        new.write("\n")


miseq_2.close()
new.close()

import sys
import re

USAGE="""heatmap.py OTU_Taxonomy_summary.xls OTU_summary.xls heatmap.txt"""

#check for argv
if len(sys.argv)!=4: sys.exit(USAGE)

#get inputfile name
input_file1=sys.argv[1]
input_file2=sys.argv[2]
output_file=sys.argv[3]

pre_heatmap_data=open(input_file2)
tax_genus=open(input_file1)
heatmap=open(output_file,'w')

genus_50=tax_genus.readlines()
genus=[]
for n in range(53):
    item=genus_50[n].split("\t")
    if "numOtus" in item:
        continue
    elif "label" in item:
        continue
    else:
        genus.append(item[-2])

top_50=pre_heatmap_data.readlines()
for n in range(53):
        item1=top_50[n].split("\t")
        if "numOtus" in item1:
            continue
        elif "label" in item1:
            continue
        else:
            otu_reads=item1[0:]
            #genus_new=re.sub("^\n","unclassified",genus)
            otu_names="_".join(x for x in (otu_reads[0],genus[n-2].split("(")[0]))
            otu_fin_names=re.sub("^Group_[A-Za-z]*","Otu",otu_names)
            heatmap.write(otu_fin_names+"\t"+"\t".join(x for x in otu_reads[1:]))

pre_heatmap_data.close()
tax_genus.close()
heatmap.close()


